---
title: "**Extending** and **comparing** methods for synthetic social contact matrices"
subtitle: "SPECTRUM & SPARK Annual Meeting"
date: "2023/02/15"
date-format: "D[th] MMM, YYYY"
author: "Nicholas Tierney"
institute: Telethon Kids Institute
format: 
  revealjs:
    theme: [blood, extra.scss]
    incremental: true
    slide-number: true
    show-slide-number: all
    footer: "njtierney.github.io/talk-spark-spectrum-2023/"
editor: visual
execute: 
  echo: false
  warning: false
  cache: true
  freeze: true
---

```{r}
#| label: library
#| include: false
library(tidyverse)
library(knitr)
library(conmat)
library(colorspace)
library(naniar)
library(visdat)
library(brolgar)
library(icons)
library(gganimate)
library(scales)
library(ggtext)
```

```{r}
#| label: source-r-files
#| echo: false
#| message: false
#| output: false
lapply(list.files(here::here("R"), full.names = TRUE), source)
```

```{r}
#| label: helpers
#| include: false

icons_fa <- icons::fontawesome
icon_mastodon <- icon_style(icons_fa$brands$mastodon, fill = "#f0a800")
icon_twitter <- icon_style(icons_fa$brands$twitter, fill = "#f0a800")
icon_globe <- icon_style(icons_fa$solid$globe, fill = "#f0a800")
icon_box <- icon_style(icons_fa$solid$`box-open`, fill = "#f0a800")
icon_link <- icon_style(icons_fa$solid$link, fill = "#f0a800")
# icon_twitter <- icon_style(icons_fa$brands$twitter, fill = "#f0a800")
icon_github <- icon_style(icons_fa$brands$github, fill = "#f0a800")
icon_plane <- icon_style(icons_fa$solid$`paper-plane`, fill = "#f0a800")


as_table <- function(...) knitr::kable(..., format='html', digits = 3)

theme_set(
  theme_grey(base_size = 16) +
  theme(
    legend.position = "bottom",
    plot.background = element_rect(fill = "transparent"),
    legend.background = element_rect(fill = "transparent")
  )
)

# **ni**ck's **pa**lette
nipa <- list(red = "#c03018",
             orange = "#f0a800",
             green = "#609048",
             purple = "#484878",
             light_purple = "#A3A3BB",
             light_green = "#AFC7A3",
             light_orange = "#F7D37F",
             light_red = "#DF978B",
             pale_purple = "#ECECF1",
             pale_green = "#D7E3D1",
             pale_orange = "#FBE9BF",
             pale_red = "#EFCBC4")

```

## A contact matrix 

```{r}
#| label: logical-matrix
name_vec <- c("James", "Luke", "Nick")
df_contact <- expand_grid(
  name_from = name_vec,
  name_to = name_vec
) %>% 
  mutate(
    contact = as.logical(c(NA, 1, 0,
                           1, NA, 0,
                           0, 0, NA)),
    contact_num = c(NA, 6, 0,
                    6, NA, 0,
                    0, 0, NA),
    contact_num_age = c(10, 6, 0,
                        6, 10, 0,
                        0, 0, 10),
    )

```

```{r}
#| echo: false
df_contact_ages <- df_contact %>% 
  mutate(
    across(
      .cols = c(name_from, name_to),
      .fns = ~case_when(
        .x == "James" ~ "0-9",
        .x == "Luke" ~ "10-19",
        .x == "Nick" ~ "20-29",
      )
    )
  ) %>% 
  rename(
    age_from = name_from,
    age_to = name_to
  )

ggplot(df_contact_ages,
       aes(x = age_from,
           y = age_to,
           fill = contact_num_age)) + 
  geom_tile(colour = "black") +
  scale_fill_continuous_sequential(palette = "Greens 2") +
  theme_minimal(base_size = 18) +
  labs(fill = "# Contacts") + 
  theme(aspect.ratio = 1)
```

::: notes
-   If we know how many times people have contact, we have an idea of which age groups will spread COVID

-   Simulate how many COVID cases would get transmitted

-   Explore how vaccination reduces transmission

-   Do this for different areas in Australia
:::

##  {background-image="images/prem-spreadsheet.png" background-size="contain"}

::: notes
**image of spreadsheet booklet of contact matrices**

The main issue with this is that we don't have much control over the outputs.

And maybe that doesn't matter to you if you just need to look at the contact matrices for a given country.

But what we needed to do is get contact matrices for a given age population structure.
:::

## Populations are different

```{r}
alice_syd <- combine_abs_two_age_distributions(
  lga_1 = "Alice Springs (T)",
  lga_2 = "Sydney (C)"
)
plot_two_abs_distributions(alice_syd)
```

## Key points

-   Contact matrices can model infectious disease spread
-   We need contact matrices for **specific parts** of Australia
-   Current best estimates are for **all of** Australia
-   We need our own approach
-   We need an R package

::: notes
-   **POLYMOD**: empirical contact data for 8 countries

-   Prem et al extrapolated POLYMOD to 155 countries

-   Prem matrices were very widely adopted

-   Various improvements can be made to Prem et al

-   Prem's updated matrices: **Australia & NZ** not included

-   We needed **finer grained** Australian contact matrices
:::

## We need an R package: `conmat`

-   **Input**: age and population data
-   **Output**: synthetic contact matrix
-   Tools to:
    -   Create next generation matrices
    -   Apply vaccination
    -   Perform SIR modelling

## age population data

```{r}
#| echo: true
#| label: get-fairfield
library(conmat)
fairfield <- abs_age_lga("Fairfield (C)")
fairfield
```

## Extrapolate our data

```{r}
#| echo: true
#| label: extrapolate-fairfield
#| output: true
synthetic_fairfield <- extrapolate_polymod(
 population = fairfield,
 age_breaks = c(seq(0, 75, by = 5), Inf) # default
)

synthetic_fairfield
```

    ── Setting Prediction Matrices ────────────

    A list of matrices containing the model
    predicted contact rate between ages in
    each setting.

    • home: a 16x16 <matrix>
    • work: a 16x16 <matrix>
    • school: a 16x16 <matrix>
    • other: a 16x16 <matrix>
    • all: a 16x16 <matrix>
    ℹ Access each <matrix> with `x$name`
    ℹ e.g., `x$home`

## Predicted Contact matrix

```{r}
#| label: plot-matrix-fairfield-home
#| echo: true
autoplot(synthetic_fairfield$home)
```

## Next Generation Matrix

```{r}
#| label: ngm-fairfield
#| echo: true

fairfield_ngm <- generate_ngm(
  synthetic_fairfield,
  age_breaks = c(seq(0, 75, by = 5), Inf),
  R_target = 1.5
)

autoplot(fairfield_ngm$home)
```

# But is it different to Prem?

## ...Wait for it

```{r}
#| label: build-SIR
#| echo: FALSE
#| message: FALSE
library(deSolve)
world_data <- socialmixr::wpp_age() %>%
  mutate(
    new_lower_age = if_else(lower.age.limit >= 75, 75L, lower.age.limit)
  ) %>%
  as_tibble() %>% 
  summarise(
    population = sum(population),
    .by = c(new_lower_age, country, year)
  )

germany_2015 <- age_population(
  data = world_data,
  location_col = country,
  location = "Germany",
  age_col = new_lower_age,
  year_col = year,
  year = 2015
)

# germany_2015

age_breaks_socialmixr <- c(seq(0, 75, by = 5), Inf)

germany_contacts <- extrapolate_polymod(
  population = germany_2015,
  age_breaks = age_breaks_socialmixr
)

n_finite_states <- length(age_breaks_socialmixr) - 1
socialmixr_matrix <- matrix(0.1761765, 
                            nrow = n_finite_states, 
                            ncol = n_finite_states)

transmission_matrix <- transmission_probability_matrix(
  home = socialmixr_matrix,
  work = socialmixr_matrix,
  school = socialmixr_matrix,
  other = socialmixr_matrix,
  age_breaks = age_breaks_socialmixr
)

parameters <- list(
  "transmission_matrix" = transmission_matrix,
  "homogeneous_contact" = germany_contacts,
  "gamma" = 1,
  "s_indexes" = 1:n_finite_states,
  "i_indexes" = (n_finite_states + 1):(2 * n_finite_states),
  "r_indexes" = (2 * n_finite_states + 1):(3 * n_finite_states)
)

S0 <- germany_2015$population
I0 <- rep(1, times = n_finite_states)
R0 <- rep(0, times = n_finite_states)
initial_condition <- c(S0, I0, R0)
names(initial_condition) <- paste(
  rep(c("S0", "I0", "R0"), each = n_finite_states),
  age_breaks_socialmixr[1:n_finite_states],
  sep = "_"
)

age_structured_sir <- function(time, state, parameters) {
  # Calculate the force of infection for each setting:
  # unstructured SIR beta is age_group_n / pop_n

  N_by_age <- map_dbl(
    .x = parameters$s_indexes,
    .f = function(i) {
      current_indexes_to_sum <- c(
        parameters$s_indexes[i],
        parameters$i_indexes[i],
        parameters$r_indexes[i]
      )
      sum(state[current_indexes_to_sum])
    }
  )

  # normalise by the age population
  N_infected_by_age <- state[parameters$i_indexes] / N_by_age

  # functional method for takign the product of two matrices
  product <- function(transmission, contact) {
    map2(transmission, contact, `*`)
  }

  age_normalise <- function(beta) {
    # matrix multiply by infected and normalise by age population
    map(beta, function(beta) {
      beta %*% N_infected_by_age
    })
  }

  lambdas <- tibble(
    setting = names(parameters$transmission_matrix),
    transmission_matrix = parameters$transmission_matrix,
    homogeneous_contact = parameters$homogeneous_contact[1:4]
  ) %>%
    mutate(
      beta = product(transmission_matrix, homogeneous_contact),
      lambda = age_normalise(beta)
    )

  # Combine them all into one term for ease of computation
  lambda_total <- Reduce("+", lambdas$lambda)

  # Don't forget to normalise your infection rate by the population!
  dSdt <- -lambda_total * state[parameters$s_indexes]

  dIdt <- lambda_total * state[parameters$s_indexes] -
    parameters$gamma * state[parameters$i_indexes]

  dRdt <- parameters$gamma * state[parameters$i_indexes]

  return(
    list(
      c(
        dSdt,
        dIdt,
        dRdt
      )
    )
  )
}

times <- seq(0, 100, by = 0.1)
germany_soln <- ode(
  y = initial_condition,
  times = times,
  func = age_structured_sir,
  parms = parameters
)

# Have to convert ode output to a data frame to do any plotting
germany_soln <- as_tibble(as.data.frame(germany_soln))

# head(germany_soln)
# tail(germany_soln)

# we are going to tidy up ODE output a few times, so wrap it into a function:
tidy_ode <- function(ode_soln) {
  ode_soln %>%
    pivot_longer(cols = -time) %>%
    mutate(parent_state = substr(name, 1, 1)) %>%
    # group_by(time, parent_state) %>%
    summarise(value = sum(value),
              .by = c(time, parent_state)) %>%
    ungroup() %>%
    rename(name = parent_state)
}

germany_soln_long <- germany_soln %>%
  tidy_ode() %>%
  mutate(type = "age_structured")

# germany_soln_long

gg_germany_sir <- ggplot(
  germany_soln_long,
  aes(x = time, y = value / sum(initial_condition), colour = name)
) +
  geom_line() +
  labs(x = "Time", 
       y = "Proportion",
       colour = "Compartment") 

# gg_germany_sir

# So we go through a similar process, setting up parameters, and solving the ODE for Prem

parameters_prem <- list(
  "transmission_matrix" = transmission_matrix,
  "homogeneous_contact" = prem_germany_contact_matrices,
  "gamma" = 1,
  "s_indexes" = 1:n_finite_states,
  "i_indexes" = (n_finite_states + 1):(2 * n_finite_states),
  "r_indexes" = (2 * n_finite_states + 1):(3 * n_finite_states)
)

prem_soln <- ode(
  y = initial_condition,
  times = times,
  func = age_structured_sir,
  parms = parameters_prem
)

# Have to convert ode output to a data frame to do any plotting
prem_soln <- as_tibble(as.data.frame(prem_soln))

# tail(prem_soln)

germany_aggregated <- tidy_ode(germany_soln)

# For the stratified model, we have to add up all the age categories together for a fair comparison.
prem_aggregated <- tidy_ode(prem_soln)

conmat_prem_soln <- bind_rows(
  conmat = germany_aggregated,
  prem = prem_aggregated,
  .id = "type"
) %>%
  mutate(name = factor(name, levels = c("S", "I", "R")))

# head(conmat_prem_soln)
# tail(conmat_prem_soln)

# # conmat_prem_soln
# 
conmat_prem_soln_40 <- conmat_prem_soln %>%  filter(time <= 40)
```

```{r}
#| label: static-plot
conmat_static_plot <- ggplot(conmat_prem_soln_40,
       aes(x = time, y = value, colour = type)) +
  geom_line() +
  geom_point(data = filter(conmat_prem_soln_40, time == 40)) +
  facet_wrap(~name, 
             ncol = 1,
             labeller = labeller(
               name = c(S = "Susceptible",
                        I = "Infected",
                        R = "Recovered")
             )) +
  scale_y_continuous(
    labels = label_number(scale_cut = cut_si("")),
    n.breaks = 3
  ) +
  scale_colour_brewer(palette = "Dark2") +
  labs(x = "Time", y = "Population", colour = "Model") +
  theme_minimal() + 
  theme(
    strip.background = element_blank(),
    strip.text = element_textbox(
      size = 12,
      color = "white", 
      fill = "grey", 
      box.color = "grey",
      halign = 0.5, 
      linetype = 1, 
      r = unit(5, "pt"), 
      width = unit(1, "npc"),
      padding = margin(2, 0, 1, 0), 
      margin = margin(3, 3, 3, 3)
    )
  )
```

```{r}
#| label: conmat-prem-animated
conmat_prem_ani <- conmat_static_plot +
  geom_point() +
  transition_reveal(along = time) 


animate(
  plot = conmat_prem_ani,
  end_pause = 20
)

```

## ...Yes

```{r}
#| label: show-static-conmat-plot
conmat_static_plot
```

## ...Yes (more work to be done)

```{r}
#| label: show-static-conmat-plot2
conmat_static_plot
```

# Thanks

-   Nick Golding
-   Aarathy Babu
-   Michael Lydeamore

# Learning more

`r icon_box` [github.com/njtierney/conmat](https://github.com/njtierney/conmat)

`r icon_link` [njtierney.github.io/talk-spark-2023](njtierney.github.io/talk-canterbury-2022)

`r icon_globe` [njtierney.com](https://www.njtierney.com/)

`r icon_mastodon` njtierney\@aus.social

`r icon_twitter` nj_tierney

`r icon_github` njtierney

`r icon_plane` nicholas.tierney\@gmail.com

# **End.**

# Extras

## Create A Next Generation Matrix

-   Once infected, a person can transmit an infectious disease to another, creating **generations** of infected individuals.
-   We can define a matrix describing the **number of newly infected** individuals in age groups, for consecutive generations.
-   This matrix is called a **next generation matrix** (NGM).

## Create A Next Generation Matrix

```{r}
#| label: generate-ngm-fairfield
#| echo: true
ngm_fairfield <- generate_ngm(
  fairfield,
  age_breaks = c(seq(0, 80, by = 5), Inf),
  R_target = 1.5
)
ngm_fairfield
```

## Apply Vaccination

-   Applies the effect of vaccination on the next generation of infections, to understand and describe the reduction of acquisition and transmission in each age group.

-   Takes the following arguments:

    -   `ngm` - a Next Generation Matrix
    -   `data` - A data frame with location specifics
    -   which columns are related to "coverage", "acquisition", and "transmission" in the `data` col

## Example vaccination data

```{r}
#| label: vaccination-example-data
#| echo: true
vaccination_effect_example_data
```

::: notes
I think they are the average vaccine efficacy (expressed as 1 minus the relative risk) over all vaccinated individuals in the population. I.e. we calculate an average form the number of people in that age group that have 1 dose, 2 doses, which brand, how long ago, etc.
:::

## Apply vaccination

```{r}
#| label: apply-vaccination-fairfield
#| echo: true
ngm_vacc_fairfield <- apply_vaccination(
  ngm = ngm_fairfield,
  data = vaccination_effect_example_data,
  coverage_col = coverage,
  acquisition_col = acquisition,
  transmission_col = transmission
)

ngm_vacc_fairfield
```

## How does the model work?

-   Train a GAM predicting **contact rate** on POLYMOD data

-   Simplified:

::: columns
::: {.column width="50%"}
``` r
model <- mgcv::bam(
  contact ~ age_diagonal + 
     age_offdiagonal + 
     ... + 
     school probability + 
     work probability
  )
```
:::

::: {.column width="50%"}
``` r
extrapolated <- predict(
  data = fairfield, 
  model = model
  )
```
:::
:::

## How does the model work (really)?

(simplified)

``` r
mgcv::bam(
  formula = contacts ~
      # Prem method did a post-hoc smoothing
      # abs(age_from - age_to)
      s(gam_age_offdiag) +
      # abs(age_from - age_to)^2
      s(gam_age_offdiag_2) +
      # abs(age_from * age_to)
      s(gam_age_diag_prod) +
      # abs(age_from + age_to)
      s(gam_age_diag_sum) +
      # pmax(age_from, age_to)
      s(gam_age_pmax) +
      # pmin(age_from, age_to)
      s(gam_age_pmin) +
      school_probability +
      work_probability,
    family = stats::poisson,
    # NOTE: the offset of participants allows us to get the rate per person
    offset = log(participants),
    data = .
    )
```

## How does the model work (really really)?

-   Here's the [link to the code](https://github.com/njtierney/conmat/blob/master/R/fit_single_contact_model.R#L127-L207)

## Some Prem et al Limitations

-   Although they provided [the code](https://github.com/kieshaprem/synthetic-contact-matrices):

-   It was code not written for reuse (code vs software)

    -   No interface on getting matrix for a specified region.
    -   Unclear which code matched which methods

-   **Australia was in original 155 countries, not in the new updated 177!**

# **This is the last slide.**
